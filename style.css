let timeoutId;
let lastSeries = [];
let isRunning = false;

// Lista de figuras válidas (00-09 y 30-99)
const validFigures = Array.from({length: 100}, (_, i) => 
    String(i).padStart(2, '0')).filter(num => {
    const n = parseInt(num);
    return n < 10 || n > 29;
});

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('start').addEventListener('click', startGenerator);
    document.getElementById('stop').addEventListener('click', stopGenerator);
    document.getElementById('showLast').addEventListener('click', showLastSeries);
    document.getElementById('mode').addEventListener('change', toggleMatrixControls);
});

function startGenerator() {
    if (isRunning) return;
    if (!validateInputs()) return;
    
    isRunning = true;
    document.getElementById('start').disabled = true;
    document.getElementById('numbers').classList.add('loading');

    const config = {
        quantity: parseInt(document.getElementById('quantity').value),
        delay: parseInt(document.getElementById('delay').value),
        displayTime: parseInt(document.getElementById('displayTime').value),
        size: parseInt(document.getElementById('size').value),
        pairs: parseInt(document.getElementById('pairs').value),
        mode: document.getElementById('mode').value,
        rows: parseInt(document.getElementById('rows')?.value || 0),
        cols: parseInt(document.getElementById('cols')?.value || 0),
        matrixSize: parseInt(document.getElementById('matrixSize')?.value || 0)
    };

    const numbersDiv = document.getElementById('numbers');
    numbersDiv.innerHTML = '';
    lastSeries = [];

    let count = 0;

    function generate() {
        if (count >= config.quantity || !isRunning) {
            stopGenerator();
            return;
        }

        numbersDiv.classList.remove('loading');
        
        switch(config.mode) {
            case "matrix":
                showMatrix(count + 1, config);
                break;
            case "figures":
                showFigures(config);
                break;
            default:
                showNumbers(config);
        }

        count++;

        timeoutId = setTimeout(() => {
            numbersDiv.innerHTML = '';
            numbersDiv.classList.add('loading');
            timeoutId = setTimeout(generate, config.delay);
        }, config.displayTime);
    }

    generate();
}

function showFigures({ pairs, size }) {
    const numbersDiv = document.getElementById('numbers');
    
    // Seleccionar figuras aleatorias sin repetición
    const shuffled = [...validFigures].sort(() => 0.5 - Math.random());
    const selected = shuffled.slice(0, pairs);
    
    // Precargar imágenes
    selected.forEach(num => {
        const img = new Image();
        img.src = `figuras/${num}.png`;
        img.style.width = `${size}px`;
        img.alt = `Figura ${num}`;
        numbersDiv.appendChild(img);
    });

    lastSeries.push(selected.join(' • '));
}

// ... (Mantén las otras funciones showNumbers, showMatrix, etc.)

function stopGenerator() {
    isRunning = false;
    document.getElementById('start').disabled = false;
    clearTimeout(timeoutId);
    document.getElementById('numbers').classList.remove('loading');
}

// ... (Resto de funciones igual que en la versión anterior)
